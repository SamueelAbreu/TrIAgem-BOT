import uvicorn
import json
from fastapi import FastAPI
from pydantic import BaseModel
from fastapi.middleware.cors import CORSMiddleware
from typing import Dict, List

print("Iniciando o Agente de Recomenda√ß√µes M√©dicas...")

BASE_RECOMENDACOES = {
    "alta": {
        "orientacoes": [
            "Procure imediatamente um pronto-socorro ou ligue para o SAMU (192)",
            "N√£o tome medicamentos por conta pr√≥pria",
            "Se poss√≠vel, tenha algu√©m para acompanh√°-lo ao hospital",
            "Mantenha-se calmo e evite esfor√ßos f√≠sicos"
        ],
        "cuidados_imediatos": [
            "Mantenha as vias a√©reas desobstru√≠das",
            "Afrouxe roupas apertadas",
            "Posicione-se de forma confort√°vel",
            "Monitore sinais vitais se poss√≠vel"
        ],
        "nao_fazer": [
            "N√£o dirija ve√≠culos",
            "N√£o tome medicamentos sem orienta√ß√£o m√©dica",
            "N√£o ignore os sintomas",
            "N√£o demore para buscar ajuda"
        ]
    },
    "media": {
        "orientacoes": [
            "Agende uma consulta m√©dica nas pr√≥ximas 24-48 horas",
            "Considere uma teleconsulta se dispon√≠vel",
            "Monitore a evolu√ß√£o dos sintomas",
            "Procure um posto de sa√∫de se os sintomas piorarem"
        ],
        "cuidados_gerais": [
            "Mantenha-se hidratado",
            "Descanse adequadamente",
            "Evite atividades f√≠sicas intensas",
            "Mantenha uma alimenta√ß√£o leve"
        ],
        "medicamentos_basicos": [
            "Paracetamol para dor e febre (conforme bula)",
            "Soro fisiol√≥gico para congest√£o nasal",
            "Ch√°s naturais (camomila, gengibre)",
            "Sempre consulte um farmac√™utico antes de tomar qualquer medicamento"
        ],
        "sinais_alerta": [
            "Febre persistente acima de 39¬∞C",
            "Dificuldade para respirar",
            "V√¥mitos persistentes",
            "Piora significativa dos sintomas"
        ]
    },
    "baixa": {
        "orientacoes": [
            "Monitore os sintomas por alguns dias",
            "Procure um m√©dico se os sintomas persistirem por mais de uma semana",
            "Mantenha cuidados b√°sicos de sa√∫de",
            "Considere medidas preventivas"
        ],
        "autocuidado": [
            "Beba bastante l√≠quido",
            "Descanse quando necess√°rio",
            "Mantenha uma alimenta√ß√£o equilibrada",
            "Pratique atividades relaxantes"
        ],
        "remedios_caseiros": [
            "Ch√° de mel e lim√£o para garganta",
            "Inala√ß√£o com vapor d'√°gua",
            "Gargarejos com √°gua morna e sal",
            "Compressas mornas para dores musculares"
        ],
        "prevencao": [
            "Lave as m√£os frequentemente",
            "Evite aglomera√ß√µes se estiver resfriado",
            "Mantenha ambientes ventilados",
            "Use m√°scara se necess√°rio"
        ]
    }
}

# Recomenda√ß√µes espec√≠ficas por sintomas
RECOMENDACOES_SINTOMAS = {
    "tosse": {
        "dicas": [
            "Mantenha-se hidratado para fluidificar secre√ß√µes",
            "Evite ambientes com fuma√ßa ou polui√ß√£o",
            "Use umidificador de ar se poss√≠vel",
            "Ch√° de mel pode ajudar a acalmar a tosse"
        ]
    },
    "febre": {
        "dicas": [
            "Monitore a temperatura regularmente",
            "Use roupas leves e mantenha o ambiente fresco",
            "Beba l√≠quidos em abund√¢ncia",
            "Compressas frias na testa podem ajudar"
        ]
    },
    "dor_cabeca": {
        "dicas": [
            "Descanse em ambiente escuro e silencioso",
            "Aplique compressas frias na testa",
            "Mantenha-se hidratado",
            "Evite telas de computador e celular"
        ]
    },
    "nausea": {
        "dicas": [
            "Coma alimentos leves e em pequenas quantidades",
            "Evite alimentos gordurosos ou muito condimentados",
            "Ch√° de gengibre pode ajudar",
            "Mantenha-se hidratado com pequenos goles"
        ]
    }
}

app = FastAPI(
    title="API do Agente de Recomenda√ß√µes M√©dicas",
    description="Uma API que fornece recomenda√ß√µes m√©dicas baseadas no resultado da triagem.",
    version="1.0.0"
)

# Configura o CORS para permitir comunica√ß√£o entre microservi√ßos
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Em produ√ß√£o, especificar origens espec√≠ficas
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

class TriagemInput(BaseModel):
    urgencia: str  # "alta", "media", "baixa"
    sintomas_texto: str
    resultado_triagem: str

class RecomendacaoResponse(BaseModel):
    urgencia: str
    recomendacoes_gerais: Dict
    recomendacoes_especificas: List[str]
    observacoes: str

def extrair_sintomas_chave(texto: str) -> List[str]:
    """Extrai sintomas-chave do texto para recomenda√ß√µes espec√≠ficas."""
    texto_lower = texto.lower()
    sintomas_encontrados = []
    
    # Mapeamento de palavras-chave para sintomas
    mapeamento_sintomas = {
        "tosse": ["tosse", "tossir", "pigarro"],
        "febre": ["febre", "febril", "temperatura"],
        "dor_cabeca": ["dor de cabe√ßa", "cefaleia", "enxaqueca", "cabe√ßa doendo"],
        "nausea": ["nausea", "n√°usea", "enjoo", "vomito", "v√¥mito"]
    }
    
    for sintoma, palavras_chave in mapeamento_sintomas.items():
        if any(palavra in texto_lower for palavra in palavras_chave):
            sintomas_encontrados.append(sintoma)
    
    return sintomas_encontrados

def gerar_recomendacoes_especificas(sintomas: List[str]) -> List[str]:
    """Gera recomenda√ß√µes espec√≠ficas baseadas nos sintomas identificados."""
    recomendacoes = []
    
    for sintoma in sintomas:
        if sintoma in RECOMENDACOES_SINTOMAS:
            recomendacoes.extend(RECOMENDACOES_SINTOMAS[sintoma]["dicas"])
    
    return recomendacoes

@app.post("/recomendacoes", response_model=RecomendacaoResponse, summary="Gera recomenda√ß√µes m√©dicas")
def gerar_recomendacoes(triagem: TriagemInput):
    """Endpoint principal que gera recomenda√ß√µes baseadas no resultado da triagem."""
    
    urgencia = triagem.urgencia.lower()
    
    # Valida o n√≠vel de urg√™ncia
    if urgencia not in BASE_RECOMENDACOES:
        urgencia = "baixa"  # Default para urg√™ncia baixa se n√£o reconhecida
    
    # Obt√©m recomenda√ß√µes gerais baseadas na urg√™ncia
    recomendacoes_gerais = BASE_RECOMENDACOES[urgencia]
    
    # Extrai sintomas espec√≠ficos do texto
    sintomas_identificados = extrair_sintomas_chave(triagem.sintomas_texto)
    
    # Gera recomenda√ß√µes espec√≠ficas
    recomendacoes_especificas = gerar_recomendacoes_especificas(sintomas_identificados)
    
    # Gera observa√ß√µes personalizadas
    if urgencia == "alta":
        observacoes = "‚ö†Ô∏è ATEN√á√ÉO: Esta √© uma situa√ß√£o de urg√™ncia. Busque atendimento m√©dico imediatamente!"
    elif urgencia == "media":
        observacoes = "‚ö° Recomenda-se acompanhamento m√©dico. Monitore os sintomas e procure ajuda se piorarem."
    else:
        observacoes = "üí° Situa√ß√£o de baixa urg√™ncia. Cuidados b√°sicos podem ser suficientes, mas monitore a evolu√ß√£o."
    
    return RecomendacaoResponse(
        urgencia=urgencia,
        recomendacoes_gerais=recomendacoes_gerais,
        recomendacoes_especificas=recomendacoes_especificas,
        observacoes=observacoes
    )

@app.get("/health", summary="Verifica o status do servi√ßo")
def health_check():
    """Endpoint para verificar se o servi√ßo est√° funcionando."""
    return {"status": "healthy", "service": "Agente de Recomenda√ß√µes M√©dicas"}

@app.get("/sintomas-suportados", summary="Lista sintomas com recomenda√ß√µes espec√≠ficas")
def listar_sintomas_suportados():
    """Retorna a lista de sintomas que possuem recomenda√ß√µes espec√≠ficas."""
    return {
        "sintomas_suportados": list(RECOMENDACOES_SINTOMAS.keys()),
        "total": len(RECOMENDACOES_SINTOMAS)
    }

# Bloco que permite a execu√ß√£o direta do script
if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8001)

